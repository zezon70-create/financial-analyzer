// export_excel_adv.js
function buildTrialBalanceSheet(){
  const header = ['Account','Debit','Credit'];
  const rows = (FA_DATA || JSON.parse(localStorage.getItem('FA_DATA_v1')) || []).map(r=> [r.account, Number(r.debit||0), Number(r.credit||0)]);
  return [header, ...rows];
}
function buildIncomeRows(){
  const inc = FA.incomeStatement();
  return [['Item','Value'], ['Revenue',inc.revenue], ['COGS',inc.cogs], ['GrossProfit',inc.grossProfit], ['Expenses',inc.expenses], ['OperatingProfit',inc.operatingProfit], ['NetProfit',inc.netProfit]];
}
function buildBalanceRows(){
  const bs = FA.balanceSheet();
  return [['Item','Value'], ['Assets',bs.assets], ['Liabilities',bs.liabilities], ['Equity',bs.equity]];
}
function buildCashRows(){
  const cf = FA.cashFlow();
  return [['Item','Value'], ['CashFromOps',cf.cashFlowFromOperations], ['NetChangeCash',cf.netChangeCash]];
}
function buildRatiosRows(){
  const r = FA.ratios();
  return [['Ratio','Value'], ['GrossMargin', (r.grossMargin*100).toFixed(2)+'%'], ['NetMargin', (r.netMargin*100).toFixed(2)+'%'], ['ROA', (r.roa*100).toFixed(2)+'%'], ['ROE', (r.roe*100).toFixed(2)+'%'], ['Liquidity', r.liquidity.toFixed(2)] ];
}
function buildNotesRows(){
  return [['Notes'], ['Generated by Financial Analyzer'], ['Models: simplified ARIMA/HW in-browser'], ['For advanced forecasting use backend analytics']];
}

function downloadExcelMulti(){
  const wb = XLSX.utils.book_new();
  XLSX.utils.book_append_sheet(wb, XLSX.utils.aoa_to_sheet(buildTrialBalanceSheet()), 'TrialBalance');
  XLSX.utils.book_append_sheet(wb, XLSX.utils.aoa_to_sheet(buildIncomeRows()), 'IncomeStatement');
  XLSX.utils.book_append_sheet(wb, XLSX.utils.aoa_to_sheet(buildBalanceRows()), 'BalanceSheet');
  XLSX.utils.book_append_sheet(wb, XLSX.utils.aoa_to_sheet(buildCashRows()), 'CashFlow');
  XLSX.utils.book_append_sheet(wb, XLSX.utils.aoa_to_sheet(buildRatiosRows()), 'Ratios');
  XLSX.utils.book_append_sheet(wb, XLSX.utils.aoa_to_sheet(buildNotesRows()), 'Notes');
  XLSX.writeFile(wb, `Financial_Report_${Date.now()}.xlsx`);
}

document.getElementById('downloadExcelAdv')?.addEventListener('click', downloadExcelMulti);
document.getElementById('downloadExcel')?.addEventListener('click', ()=> downloadExcelMulti());
document.getElementById('downloadPDF')?.addEventListener('click', async ()=>{
  const el = document.getElementById('reportPreview') || document.body;
  const canvas = await html2canvas(el, {scale:2});
  const img = canvas.toDataURL('image/png');
  const { jsPDF } = window.jspdf;
  const pdf = new jsPDF('p','mm','a4');
  const prop = pdf.getImageProperties(img);
  const pdfWidth = pdf.internal.pageSize.getWidth();
  const pdfHeight = (prop.height * pdfWidth) / prop.width;
  pdf.addImage(img,'PNG',0,0,pdfWidth,pdfHeight);
  pdf.save(`Financial_Report_${Date.now()}.pdf`);
});
